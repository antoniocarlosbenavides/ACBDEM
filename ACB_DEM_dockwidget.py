# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ACBDEMDockWidget
                                 A QGIS plugin
 Este plugin crea y procesa Modelos Digitales del Terreno
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-21
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Antonio Carlos Benavides García. Máster en Geotecnologías Cartográficas para Ingeniería y Arquitectura. Universidad de Salamanca
        email                : antonio.benavides@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys
import os
import shutil
import qgis.gui
import pathlib
import webbrowser
import processing
import subprocess
import json

from qgis.PyQt.QtCore import *
from PyQt5.QtCore import (Qt, QCoreApplication, QFileInfo, QSettings, QUrl)
from PyQt5.QtGui import QPixmap, QColor
from PyQt5.QtGui import *
from PyQt5.QtCore import QDate, QDateTime, QUrl
from PyQt5 import QtWidgets
from qgis.core.additions.edit import edit

from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QCheckBox, QMessageBox
from PyQt5.QtGui import QFont, QColor

from os import remove
from pathlib import Path
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QInputDialog, QLabel, QDialog, QProgressBar,QApplication
from qgis.gui import QgsFileWidget, QgsMessageBar, QgsMapCanvas, QgsVertexMarker, QgsMapCanvasItem, QgsRubberBand, QgsProjectionSelectionDialog
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal,QSettings, QTranslator, QCoreApplication, Qt, QTextCodec
from qgis.core import Qgis,QgsProject,QgsDataProvider,QgsVectorLayer,QgsFeature,QgsField, QgsPointXY, QgsVectorFileWriter, QgsRectangle, QgsRasterLayer, QgsMapRendererJob, QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsLayoutItemPicture, QgsLayoutExporter, QgsMarkerSymbol, QgsFeatureRequest, QgsStyle, QgsProcessingFeedback, QgsExpression, QgsExpressionContext,QgsExpressionContextUtils,QgsProcessing,QgsProcessingAlgorithm,QgsProcessingMultiStepFeedback,QgsProcessingParameterMultipleLayers,QgsLayoutExporter, QgsLayoutItemMap, QgsApplication,QgsDataSourceUri
from qgis import processing #necesario para ejecutar comandos de la caja de herramientas
from qgis.utils import iface, plugins
from datetime import datetime
from osgeo import ogr,gdal


# Importa clases de ui
from .ui.about import Acercade
from .ui.ayuda import AyudaCombina
from .ui.veninicio import VentanaInicio
from .ui.formulario import FormularioBase
from .ui.forpdal import FormularioPdal
from .ui.forpdal2 import FormularioPdal2
from .ui.forpdal3 import FormularioPdal3
from .ui.forpdal4 import FormularioPdal4
from .ui.forcc import FormularioCloudComp
from .ui.forcc2 import FormularioCloudComp2
from .ui.forcc3 import FormularioCloudComp3
from .ui.forcc4 import FormularioCloudComp4
from .ui.estad import FormularioEstadistica
from .ui.modelo3d import modelo3dclass
from .ui.sketch import sketchfab
from .ui.malla import FormularioMalla





# C L A S E   ACB_DEM
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ACB_DEM_dockwidget_base.ui'))

class ACBDEMDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    # I N I C I O
    def __init__(self, parent=None):
        """Constructor."""
        super(ACBDEMDockWidget, self).__init__(parent)
        self.setupUi(self)

        # inicializa el directorio del plugin
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'acb_dem_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

        # Muestra el formulario de la clase veninicio El mundo azul
        dlg = VentanaInicio()
        dlg.exec_()

        # **** INICIO CARGA LAS CLASES DE FORMULARIOS EMERGENTES ******
        self.pbacercade.clicked.connect(self.runAbout)
        self.pbayudaCombina.clicked.connect(self.ayudacombi)

        # **** LOGOS DEL PLUGIN  ****
        global rutamanual,rutamodelo,rutaejemplo,rutacapa,rutacurvas,ejecutable,rutacloudcompare, rutafilecc,crs
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutanubes = (os.path.join(rutactual, 'ACB-DATOS/NUBEPUNTOS'))  # Ruta de la carpeta con todas las nubes de puntos
        rutamodelo=(os.path.join(self.plugin_dir, 'QGIS_MODELO'))
        rutaejemplo=(os.path.join(self.plugin_dir, 'QGIS_EJEMPLO'))
        rutacurvas = (os.path.join(rutactual, 'ACB-CAPAS/ACB_CURVASNIVEL/'))

        # **** INICIO PESTAÑA PROYECTO ******
        self.pbnuevoproyecto.clicked.connect(self.proyecto)
        self.pbabre.clicked.connect(self.abreproyecto)
        self.pbmanual2.clicked.connect(self.ManualUsuario)
        self.pbejemplo.clicked.connect(self.ejemplo)

        # **** INICIO PESTAÑA MAPA BASE ******
        self.btn_mapabase.clicked.connect(self.mapabase)
        self.pbcrs.clicked.connect(self.setProjectCrs)
        self.pbcrs2.clicked.connect(self.setProjectCrs)
        self.pbcrs3.clicked.connect(self.setProjectCrs)
        #Al inicio asignamos el crs de proyecto a los label crs
        crs=QgsProject.instance().crs()
        self.qlecrs2.setText(format(crs.description()))
        self.qlecrs5.setText(format(crs.description()))
        self.qlecrs6.setText(format(crs.description()))
        self.qlecrs.setText(format(crs.postgisSrid()))
        self.qlecrs3.setText(format(crs.postgisSrid()))
        self.qlecrs4.setText(format(crs.postgisSrid()))

        # **** INICIO PESTAÑA DEM LIDAR ******

        self.btnpedal.clicked.connect(self.pdal)
        self.btnpedal2.clicked.connect(self.pdal2)
        self.btnpedal3.clicked.connect(self.pdal3)
        self.btnpedal4.clicked.connect(self.pdal4)
        self.pbrutanubes.clicked.connect(self.abrecarpetanubes)
        self.btncc.clicked.connect(self.cc)
        self.btncc2.clicked.connect(self.cc2)
        self.btncc3.clicked.connect(self.cc3)
        self.btncc4.clicked.connect(self.cc4)
        self.pbmalla.clicked.connect(self.malla)
        self.pbperfil.clicked.connect(self.perfil)


        # **** INICIO PESTAÑA MODELO3D ******

        self.pbprint3d.clicked.connect(self.print3d) #abre la funcion DEMto3D que abre el plugin con el mismo nombre extrae stl
        self.pbayuda3d.clicked.connect(self.ayudaprint3d)

        # **** CLOUDCOMPARE ******
        self.pbrutacc.mousePressEvent = self.localizacc
        # INCORPORA LAS VARIABLES DE USUARIO GUARDADAS EN EL PROYECTO AL ARRANCAR
        # Carga en los objetos Qtdesigner el valor de la variable
        self.project = QgsProject.instance()
        # ejecutable cloudcompare
        proj_variables = QgsExpressionContextUtils.projectScope(self.project)  # llamada a todas las variables del proyecto
        ejecutable = str(proj_variables.variable('acbejecutable'))  # llamada a la variable 'acbtitulo' en formato cadena
        rutacloudcompare = str(proj_variables.variable('acbrutacc'))#llamada a la variable 'acbrutacc' en formato cadena
        self.lerutacc.setText(rutacloudcompare)


        self.terutanubes.setText(rutanubes)
        self.btnabreplasio.clicked.connect(self.abreplasio)
        self.btnabreplasio2.clicked.connect(self.abreplasio2)
        self.btnabreplasio3.clicked.connect(self.abreplasio3)
        self.btnabreplasio4.clicked.connect(self.abreplasio3)
        self.btnabreplasio6.clicked.connect(self.abreplasio3)
        self.btnabreplasio7.clicked.connect(self.abreplasio3)
        self.btnabreplasio8.clicked.connect(self.abreplasio3)
        self.btnabrecloud0.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud2.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud3.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud4.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud5.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud6.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud7.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud9.clicked.connect(self.abreccomparedsmpdal)
        self.btnabrecloud10.clicked.connect(self.abreccomparemalla)

        self.pbgrafica.clicked.connect(self.abreinformes)

        self.pbclip.clicked.connect(self.clipraster)
        self.pbclip2.clicked.connect(self.clipraster)
        self.pbclip3.clicked.connect(self.clipraster)
        self.pbclip4.clicked.connect(self.clipraster)
        self.pbclip5.clicked.connect(self.clipraster)
        self.pbclip6.clicked.connect(self.clipraster)
        self.pbclip7.clicked.connect(self.clipraster)
        self.pbclip8.clicked.connect(self.clipraster)


        self.btestad.clicked.connect(self.funestad)
        self.pb_cn.clicked.connect(self.curvasnivel)

        self.nube1.clicked.connect(self.abrenubes)
        self.nube2.clicked.connect(self.abrenubes)
        self.nube3.clicked.connect(self.abrenubes)
        self.nube4.clicked.connect(self.abrenubes)
        self.nube5.clicked.connect(self.abrenubes)
        self.nube6.clicked.connect(self.abrenubes)
        self.nube7.clicked.connect(self.abrenubes)
        self.nube8.clicked.connect(self.abrenubes)

        self.folder1.clicked.connect(self.abredsmpdal)
        self.folder2.clicked.connect(self.abredempdal)
        self.folder3.clicked.connect(self.abredsmpdal)
        self.folder11.clicked.connect(self.abredsmpdal)
        self.folder4.clicked.connect(self.abredsmcc)
        self.folder5.clicked.connect(self.abredemcc)
        self.folder6.clicked.connect(self.abredsmcc)
        self.folder12.clicked.connect(self.abredsmcc)

        self.folder7.clicked.connect(self.abrecurvas)
        self.folder8.clicked.connect(self.abremallas)
        self.folder9.clicked.connect(self.abreinformes)
        self.folder10.clicked.connect(self.abreraster)

        self.PBPPKK.clicked.connect(self.ppkk)
        self.PBFORMATOPPKK.clicked.connect(self.formatoppkk)

        # *** INICIO PESTAÑA FORMATO
        #Llamada a formato DEM pseudocolor
        self.lb_dempseudo.mousePressEvent = self.formatodempseudo
        self.lb_demhill.mousePressEvent = self.formatodemhill
        self.lb_demgris.mousePressEvent = self.formatodemgrismono
        self.lb_dempseudo2.mousePressEvent = self.formatodempseudo2
        self.lb_dempseudo3.mousePressEvent = self.formatodempseudo3
        self.lb_verdes.mousePressEvent = self.formatoverdes
        self.lb_vintage.mousePressEvent = self.formatovintage
        self.lb_edificios.mousePressEvent= self.formatoedificios
        self.lb_vegetacion.mousePressEvent = self.formatovegetacion
        self.lb_histograma.mousePressEvent = self.formatohistograma
        self.lbppkk.mousePressEvent = self.formatoppkk


        # *** INICIO PESTAÑA SALIDA
        rutadefecto = (os.path.join(os.path.dirname(__file__), 'icons', "ICONACBDEM.png"))  # ruta del icono por defecto
        self.qfw_logo.setFilter("Imagen png(*.png);;Imagen jpg(*.jpg);;Imagen tif(*.tif);;Imagen bmp(*bmp);;Imagen gif(*gif)")
        self.qfw_logo2.setFilter("Imagen png(*.png);;Imagen jpg(*.jpg);;Imagen tif(*.tif);;Imagen bmp(*bmp);;Imagen gif(*gif)")
        self.qfwhistograma.setFilter("Imagen png(*.png);;Imagen jpg(*.jpg);;Imagen tif(*.tif);;Imagen bmp(*bmp);;Imagen gif(*gif)")
        self.cmbinformes.currentIndexChanged.connect(self.elegirinforme)  # al seleccionar desplegable activa la función elegir
        self.pbrepor.clicked.connect(self.imprimepdf)
        self.pbpng.clicked.connect(self.imprimepng)
        self.btnlistainformes.clicked.connect(self.selecciona_informe)
        self.pbactualiza.clicked.connect(self.configura)
        self.pbactualiza_2.clicked.connect(self.configura)
        self.pbweb.clicked.connect(self.export3d)
        self.pbweb2.clicked.connect(self.visor)
        self.pbprevio.clicked.connect(self.model3dprevio)
        self.pbmodel3d.clicked.connect(self.modelogltf)
        self.pbsket.clicked.connect(self.sketch3d)
        self.pbayuda.clicked.connect(self.ayuda2)
        self.qlnombre.setText("rastersalida")
        self.pb_raster.clicked.connect(self.exportaraster)




        # INCORPORA LAS VARIABLES DE USUARIO GUARDADAS EN EL PROYECTO AL ARRANCAR

        # Variables que toma son acbtitulo acbfechainforme acblogoinforme
        # Carga en los objetos Qtdesigner el valor de la variable
        self.project = QgsProject.instance()
        proj_variables = QgsExpressionContextUtils.projectScope(self.project)  # llamada a todas las variables del proyecto

        # ejecutable cloudcompare
        ejecutable = str(proj_variables.variable('acbejecutable'))  # llamada a la variable 'acbtitulo' en formato cadena


        # TITULO DE PROYECTO
        titulo = str(proj_variables.variable('acbtitulo'))  # llamada a la variable 'acbtitulo' en formato cadena
        self.letitulo.setText(titulo)  # asigna al objeto self.letitulo la variable titulo=acbtitulo

        # DESCRIPCION 1
        entidad1 = str(proj_variables.variable('acbentidad1'))
        self.lentidad1.setText(entidad1)

        # DESCRIPCION 2
        entidad2 = str(proj_variables.variable('acbentidad2'))
        self.lentidad2.setText(entidad2)

        # FECHA DE INFORME
        fechareport = str(proj_variables.variable('acbfechainforme'))
        self.txtfecha.setText(fechareport)

        # LOGO DEL INFORME
        rutanueva = str(proj_variables.variable('acblogoinforme'))
        self.qfw_logo.setFilePath(rutanueva)

        # TIPO DE INFORME
        tipo = str(proj_variables.variable('tipoinforme'))

        # AUTOR DE PROYECTO
        autor = str(proj_variables.variable('acbautor'))
        self.le_autor.setText(autor)

        # IMAGEN 3D
        rutanueva2 = str(proj_variables.variable('acbimagen3d'))
        self.qfw_logo2.setFilePath(rutanueva2)

        # HISTOGRAMA
        rutanueva3 = str(proj_variables.variable('acbhistograma'))
        self.qfwhistograma.setFilePath(rutanueva3)



    # F U N C I O N E S

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    #Abre el formulario llamado desde el botón pbacercade
    def runAbout(self):
        # show the dialog
        dlg = Acercade()
        dlg.exec_()

    # Abre el formulario llamado desde el botón pbayudaCombina
    def ayudacombi(self):
        # show the dialog
        dlg = AyudaCombina()
        dlg.exec_()

    # Abre el proyecto
    def abreproyecto(self):
        self.fileproyecto.setFilter("Archivos Qgis(*.qgs);;Archivos QGS(*.QGS);;Archivos qgz (*.qgz);;Archivos QGZ (*.QGZ)")  # filtro para los archivos a mostrar
        self.fileproyecto.setDialogTitle('Abrir Proyecto QGIS')  #  título para el diálogo
        proyecto_path = self.fileproyecto.filePath() #ruta del proyecto que vamos a abrir
        if proyecto_path:
            QgsProject.instance().read(proyecto_path)
        self.lerutactual.setText(proyecto_path)
    def proyecto(self, event):
        global titulo, cuerpo, rutanueva, nombrecorto
        rutaproyecto = QgsProject.instance().fileName()
        # copia la carpeta modelo desde el pluggin a la carpeta de destino
        nombrecorto = self.lecorto.text()  # nombre de la carpeta destino
        folderproyecto = 'C:/ACBQGIS/'
        rutanueva = folderproyecto + nombrecorto + '/'
        rutactual = QgsProject.instance().homePath()
        self.lerutanuevo.setText(rutanueva)
        self.lerutactual.setText(rutactual)

        if os.path.isdir(rutanueva):  # COMPRUEBA SI LA CARPETA EXISTE
            titulo="Proceso Proyecto Nuevo"
            cuerpo1 = "La carpeta existe"
            cuerpo2 = "No se puede crear el proyecto\n previamente se debe eliminar\n la carpeta existente"
            # Muestra el formulario ventana informativa flotante
            dlg = FormularioBase()
            dlg.findChild(QLabel,'lbproceso').setText(titulo)
            dlg.findChild(QLabel,'lbproceso1').setText(cuerpo1)
            dlg.findChild(QLabel,'lbproceso2').setText(cuerpo2)
            dlg.exec_()
            os.startfile(rutanueva)  # abre la carpeta
        else:
            # COPIA LA CARPETA ENTERA EN OTRA UBICACIÓN
            self.copia(event)
            # Muestra el formulario ventana informativa flotante
            titulo="Proceso Proyecto Nuevo"
            cuerpo1 = "Copia de carpeta Modelo Completada"
            cuerpo2 = "Se ha creado una copia del modelo en la ruta \n" + rutanueva
            dlg = FormularioBase()
            dlg.findChild(QLabel,'lbproceso').setText(titulo)
            dlg.findChild(QLabel,'lbproceso1').setText(cuerpo1)
            dlg.findChild(QLabel,'lbproceso2').setText(cuerpo2)
            dlg.exec_()
            os.startfile(rutanueva)  # abre la carpeta

    def copia(self, event):

        shutil.copytree(rutamodelo, rutanueva)  # copia toda la carpeta
        # Renombra el archivo creado Qgis .qgz
        archivo = rutanueva + 'ACBDEM' + '.qgz'
        nombre_nuevo = rutanueva + nombrecorto + '.qgz'
        os.rename(archivo, nombre_nuevo)  # renombra el archivo desde origen a destino

    def ManualUsuario(self, event):
        rutamanual=(os.path.join(os.path.dirname(__file__), 'icons', "MANUAL_USUARIO.pdf")) # ruta del manual en el plugin
        os.popen(rutamanual) #abre con la aplicaicón por defecto en windows

    def ejemplo(self, event):
        folderproyecto = 'C:/ACBQGIS/'
        rutanueva2 = folderproyecto + 'QGIS_EJEMPLO' + '/'

        shutil.copytree(rutaejemplo, rutanueva2)  # copia toda la carpeta
        os.startfile(rutanueva2)  # abre la carpeta

    def mapabase(self, event):
        # ***** C A R G A  R A S T E R   O R T O  P N O A *****
        if self.rb10.isChecked():
            # Teselaxyz ORTOFOTO Google Satellite crs=EPSG:3857
            url_google_satellite= 'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}'
            rasterLayergoo = QgsRasterLayer("type=xyz&url=" + url_google_satellite, 'Google Satellite', "wms")
            QgsProject.instance().addMapLayer(rasterLayergoo, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(0, rasterLayergoo)  # inserta la capa raster al inicio del grupomapa

        if self.rb9.isChecked():
            # Este servicio     WMS funciona pero ralentiza mucho, lo cambiamos por conexión Teselaxyz
            # pnoa max actualidad. Carga el ráster del servicio WMS
            crs = QgsProject.instance().crs()
            textocrs="crs=EPSG:"+str(crs.postgisSrid())
            urlWithParams = textocrs+"&format=image/png&layers=OI.OrthoimageCoverage&styles&url=http://www.ign.es/wms-inspire/pnoa-ma"
            wmsLayer3 = QgsRasterLayer(urlWithParams, 'PNOA MA WMS', 'wms')
            QgsProject.instance().addMapLayer(wmsLayer3, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(-1, wmsLayer3)  # inserta la capa raster al final del grupomapa

        if self.rb6.isChecked():
            # Teselaxyz ORTOFOTO MA PNOA SENTINEL2 19 niveles
            urlORT = 'https://tms-pnoa-ma.idee.es/1.0.0/pnoa-ma/{z}/{x}/{-y}.jpeg'
            rasterLayerORT = QgsRasterLayer("type=xyz&url=" + urlORT, 'PNOA MA SENTINEL2 TMS', "wms")
            QgsProject.instance().addMapLayer(rasterLayerORT, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(-1, rasterLayerORT)  # inserta la capa raster al final del grupomapa

        if self.rb7.isChecked():
            # Teselaxyz IGN CARTOGRAFIA RASTER 17 niveles
            urlRAS = 'https://tms-mapa-raster.ign.es/1.0.0/mapa-raster/{z}/{x}/{-y}.jpeg'
            rasterLayerRAS = QgsRasterLayer("type=xyz&url=" + urlRAS, 'Mapa Ráster IGN TMS', "wms")
            QgsProject.instance().addMapLayer(rasterLayerRAS, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(-1, rasterLayerRAS)  # inserta la capa raster al final del grupomapa

        if self.rb8.isChecked():
            # Teselaxyz IGN BASE TODO jpeg 17 niveles
            url = 'https://tms-ign-base.idee.es/1.0.0/IGNBaseTodo/{z}/{x}/{-y}.jpeg'
            rasterLayerMBIGN = QgsRasterLayer("type=xyz&url=" + url, 'Mapa Base IGN', "wms")
            QgsProject.instance().addMapLayer(rasterLayerMBIGN, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(-1, rasterLayerMBIGN)  # inserta la capa raster al final del grupomapa


        if self.rb11.isChecked():
            # Teselaxyz IGN RELIEVE TERRENO ESPAÑA MDT MALLA 25 JPEG
            url = 'https://tms-relieve.idee.es/1.0.0/relieve/{z}/{x}/{-y}.jpeg'
            rasterLayerMBIGN = QgsRasterLayer("type=xyz&url=" + url, 'Mapa Relieve IGN MTN25', "wms")
            QgsProject.instance().addMapLayer(rasterLayerMBIGN, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(-1, rasterLayerMBIGN)  # inserta la capa raster al final del grupomapa

        if self.rb12.isChecked():
            # WMS IGN MODELO DIGITAL DEL TERRENO MALLA 25 PNG
            crs = QgsProject.instance().crs()
            textocrs="crs=EPSG:"+str(crs.postgisSrid())
            urlWithParams = textocrs+"&dpiMode=7&format=image/png&layers=EL.ElevationGridCoverage&styles&tilePixelRatio=0&url=https://servicios.idee.es/wms-inspire/mdt"
            wmsLayer3 = QgsRasterLayer(urlWithParams, 'MDT25 IGN', 'wms')
            QgsProject.instance().addMapLayer(wmsLayer3, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(-1, wmsLayer3)  # inserta la capa raster al final del grupomapa

        if self.rb13.isChecked():
            # WMS IGN CURVAS DE NIVEL CADA 50m
            crs = QgsProject.instance().crs()
            textocrs="crs=EPSG:"+str(crs.postgisSrid())
            urlWithParams = textocrs+"&dpiMode=7&format=image/png&layers=EL.ContourLine&styles&tilePixelRatio=0&url=https://servicios.idee.es/wms-inspire/mdt"
            wmsLayer3 = QgsRasterLayer(urlWithParams, 'Curvas Nivel 50 IGN', 'wms')
            QgsProject.instance().addMapLayer(wmsLayer3, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(-1, wmsLayer3)  # inserta la capa raster al final del grupomapa

        if self.rb14.isChecked():
            # WMS IGN VUELO AMERICANO 1956-1957 Resolucion entre 0.5 y 1m
            crs = QgsProject.instance().crs()
            textocrs="crs=EPSG:"+str(crs.postgisSrid())
            urlWithParams = textocrs+"&dpiMode=7&format=image/png&layers=AMS_1956-1957&styles&tilePixelRatio=0&url=http://www.ign.es/wms/pnoa-historico"
            wmsLayer3 = QgsRasterLayer(urlWithParams, 'Vuelo Americano 1956', 'wms')
            QgsProject.instance().addMapLayer(wmsLayer3, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('MAPAS_BASE')  # localiza el grupo en el árbol
            grupomapa.insertLayer(-1, wmsLayer3)  # inserta la capa raster al final del grupomapa

        # ZOOM EXTENSION MASCARA
        extension=QgsVectorLayer('MASCARA').extent()
        # El siguiente código hace zoom solo a la extensión
        capareferencia = QgsProject.instance().mapLayersByName('MASCARA')[0]
        extension = capareferencia.extent()
        canvas = iface.mapCanvas()
        # Ajusta el lienzo de mapa a la extensión de la capa de referncia
        canvas.setExtent(extension)
        # Refresca el lienzo de mapa
        canvas.refresh()

        # Muestra el formulario ventana informativa flotante
        titulo = "La carga de Mapas Base\nha finalizado"
        cuerpo1 = "\n Se han incorporado servicios teselaxyz y WMS"
        cuerpo2 = "Desactiva los Mapas que no utilices en cada momento"
        dlg = FormularioBase()
        dlg.findChild(QLabel, 'lbproceso').setText(titulo)
        dlg.findChild(QLabel, 'lbproceso1').setText(cuerpo1)
        dlg.findChild(QLabel, 'lbproceso2').setText(cuerpo2)
        dlg.exec_()

    def setProjectCrs(self,event):
        global crs
        #Dialogo de EPSG crs del proyecto podrá elegir otro
        dialog=QgsProjectionSelectionDialog()
        if dialog.exec_():#abre el cuadro de diálogo
            crs=dialog.crs()#este es el crs seleccionado
            QgsProject.instance().setCrs(crs)#asigna al proyecto el crs seleccionado
            self.qlecrs2.setText(format(crs.description()))
            self.qlecrs5.setText(format(crs.description()))
            self.qlecrs6.setText(format(crs.description()))
            self.qlecrs.setText(format(crs.postgisSrid()))
            self.qlecrs3.setText(format(crs.postgisSrid()))
            self.qlecrs4.setText(format(crs.postgisSrid()))
        iface.mapCanvas().refresh()

#        print("CRS PROJ text: {}".format(crs.toProj()))

    def pdal(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        self.ventanamensaje("Segoe Print", 12, "Aviso", "Utiliza mismo paso de malla en todos los procesos")
        dlg=FormularioPdal() #clase del formulario
        dlg.exec_()
        self.previacoordz(event) # llama a una batería de funciones para lanzar Cloud Compare y crear un campo escalar SF Coord Z para el Histograma en Pdal
        self.abreccomparedsmpdal(event) # Abre CloudCompare de las  nubes Pdal ya con su SF Coord Z

    def pdal2(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        dlg=FormularioPdal2() #clase del formulario
        dlg.exec_()
        self.previacoordz(event) # llama a una batería de funciones para lanzar Cloud Compare y crear un campo escalar SF Coord Z para el Histograma en Pdal
        self.abreccomparedsmpdal(event)# Abre CloudCompare de las  nubes Pdal ya con su SF Coord Z

    def pdal3(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        self.ventanamensaje("Segoe Print", 12, "Aviso", "Utiliza mismo paso de malla en todos los procesos")

        dlg=FormularioPdal3() #clase del formulario
        dlg.exec_()
        self.previacoordz(event) # llama a una batería de funciones para lanzar Cloud Compare y crear un campo escalar SF Coord Z para el Histograma en Pdal
        self.ventanamensaje("Segoe Print", 12, "Aviso", "Si la capa EDIFICIOSbyALTURA_PDAL no se carga\n Vuelve a procesar\n Ejecuta EDF_DSM")
        self.abreccomparedsmpdal(event)# Abre CloudCompare de las  nubes Pdal ya con su SF Coord Z

    def cc(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        dlg=FormularioCloudComp() #clase del formulario
        dlg.exec_()
        self.abreccomparedsmpdal(event)  # Abre CloudCompare de las  nubes Pdal ya con su SF Coord Z

    def cc2(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        self.ventanamensaje("Segoe Print", 12, "Aviso", "Utiliza mismo paso de malla en todos los procesos\n Se precisa paso previo por DSM CLOUD COMPARE")
        dlg=FormularioCloudComp2() #clase del formulario
        dlg.exec_()
        self.ventanamensaje("Cascadia Mono", 12, "Aviso", "Si la capa EDIFICIOSbyALTURA_CC no se carga\n Vuelve a procesar\n Ejecuta EDF_DSM")
        self.abreccomparedsmpdal(event)  # Abre CloudCompare de las  nubes Pdal ya con su SF Coord Z

    def cc3(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        self.ventanamensaje("Cascadia Mono", 12, "Aviso", "Utiliza mismo paso de malla en todos los procesos")
        dlg=FormularioCloudComp3() #clase del formulario
        dlg.exec_()
        self.ventanamensaje("Segoe Print", 12, "Aviso", "Si la capa EDIFICIOSbyALTURA_CC no se carga\n Vuelve a procesar\n Ejecuta EDF_DSM")
        self.abreccomparedsmpdal(event)  # Abre CloudCompare de las  nubes Pdal ya con su SF Coord Z

    def cc4(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        self.ventanamensaje("Segoe Print", 12, "Aviso", "Utiliza mismo paso de malla en todos los procesos")
        dlg=FormularioCloudComp4() #clase del formulario
        dlg.exec_()
        self.ventanamensaje("Segoe Print", 12, "Aviso",
                            "Si las capas Vegetación no se cargan\n Vuelve a procesar\n Ejecuta Vegetación")

        self.abreccomparedsmpdal(event)  # Abre CloudCompare de las  nubes Pdal ya con su SF Coord Z

    def malla(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        dlg=FormularioMalla() #clase del formulario
        dlg.exec_()

    def pdal4(self, event):
        # Llama al formulario forpdal.ui que creará el archivo acb_pdal.json
        self.ventanamensaje("Segoe Print", 12, "Aviso",
                            "Utiliza mismo paso de malla en todos los procesos")
        dlg=FormularioPdal4() #clase del formulario
        dlg.exec_()
        self.ventanamensaje("Segoe Print", 12, "Aviso",
                            "Si las capas Vegetación no se cargan\n Vuelve a procesar\n Ejecuta Vegetación")
        self.abreccomparedsmpdal(event)  # Abre CloudCompare de las  nubes Pdal ya con su SF Coord Z

    def abrecarpetanubes(self,event):
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutanubes = (os.path.join(rutactual, 'ACB-DATOS/NUBEPUNTOS'))  # Ruta de la carpeta con todas las nubes de puntos
        os.system(f'start {os.path.realpath(rutanubes)}') #abre la carpeta de origen de nube de puntos

    def abreplasio(self,event):
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacarpeta = (os.path.join(rutactual, 'ACB-CAPAS/ACB_NUBES/'))
        self.ventanamensaje("Segoe Print", 12, 'Nube de puntos LIDAR en PLAS.IO',
                            "Arrastra el archivo laz al navegador plas.io")
        os.system(f'start {os.path.realpath(rutacarpeta)}') #abre la carpeta de destino de archivos en windows
        urldireccion = 'https://plas.io/'  # direccion url de plas io visor de nube de puntos
        webbrowser.open(urldireccion,new=0,autoraise=True,) #intentará abrir la aplicación plas.io

    def abreplasio2(self,event):
        rutactual2 = QgsProject.instance().homePath()  # ruta actual
        rutacarpeta2 = (os.path.join(rutactual2, 'ACB-CAPAS/ACB_NUBES/'))
        self.ventanamensaje("Segoe Print", 12, 'Nube de puntos LIDAR en PLAS.IO',
                            "Arrastra el archivo laz al navegador plas.io")
        os.system(f'start {os.path.realpath(rutacarpeta2)}') #abre la carpeta de destino de archivos en windows
        urldireccion = 'https://plas.io/'  # direccion url de plas io visor de nube de puntos
        webbrowser.open(urldireccion,new=0,autoraise=True,) #intentará abrir la aplicación plas.io'''

    def abreplasio3(self,event):
        rutactual3 = QgsProject.instance().homePath()  # ruta actual
        rutacarpeta3 = (os.path.join(rutactual3, 'ACB-CAPAS/ACB_NUBES/'))
        self.ventanamensaje("Segoe Print", 12, 'Nube de puntos LIDAR en PLAS.IO',
                            "Arrastra el archivo laz al navegador plas.io")
        os.system(f'start {os.path.realpath(rutacarpeta3)}') #abre la carpeta de destino de archivos en windows
        urldireccion = 'https://plas.io/'  # direccion url de plas io visor de nube de puntos
        webbrowser.open(urldireccion,new=0,autoraise=True,) #intentará abrir la aplicación plas.io

    def abreccomparedsmpdal(self,event):
        reply = QMessageBox.question(None, "Nube de Puntos", "¿Quieres abrir Cloud Compare?",
                                         QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            rutactual2 = QgsProject.instance().homePath()  # ruta actual
            rutacarpeta2 = (os.path.join(rutactual2, 'ACB-CAPAS/ACB_NUBES/'))
            # Lista para almacenar las rutas completas de los archivos
            command = [ejecutable]
            # Iterar sobre los archivos en la carpeta
            try:
                for nombre_archivo in os.listdir(rutacarpeta2):
                    ruta_completa = os.path.join(rutacarpeta2, nombre_archivo)# Obtener la ruta completa del archivo
                    if ".txt" in nombre_archivo:
                        pass
                    elif ".laz" or ".las" or ".bin" in nombre_archivo:# Verificar si laz o bin están en la cadena de texto
                        command.append(ruta_completa)# Agregar la ruta completa a la lista
                    else:
                        pass
                subprocess.Popen(command)
            except:
                QMessageBox.Information(None,"No ha sido posible abrir la Aplicación", "'Tendrás que abrirlo a mano")
        else:
            pass

    def abreccomparemalla(self,event):
        rutactual2 = QgsProject.instance().homePath()  # ruta actual
        rutacarpeta2 = (os.path.join(rutactual2, 'ACB-CAPAS/ACB_MALLAS/'))
        # Lista para almacenar las rutas completas de los archivos
        command = [ejecutable]
        # Iterar sobre los archivos en la carpeta
        try:
            for nombre_archivo in os.listdir(rutacarpeta2):
                ruta_completa = os.path.join(rutacarpeta2, nombre_archivo)# Obtener la ruta completa del archivo
                if ".txt" in nombre_archivo:# Verificar si es un archivo (no un directorio)
                    pass
                elif ".laz" or ".bin" or ".stl" or ".obj" or ".vtk" or ".dxf" or ".fbx" or ".off" in nombre_archivo:# Verificar si es un archivo (no un directorio)
                    command.append(ruta_completa)# Agregar la ruta completa a la lista
                else: pass
            subprocess.Popen(command)
        except: pass

    def formatodempseudo(self,event):
        # el estilo está en rutapseudocolor
        # Ruta al archivo de la capa raster rutarasterfill y la capa es self.qleraster.text()
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutapseudocolor = (os.path.join(rutaestilos, "ACB_DEM_PSEUDOCOLOR.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutapseudocolor)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca
        # Abrir el cuadro de diálogo de propiedades de la capa
        prop_dialog = iface.showLayerProperties(caparaster)
        self.ventanamensaje("Arial",12,"Propiedades de Capa","Acepta para cerrar el Cuadro de Propiedades")


    def formatovintage(self, event):
        # el estilo está en rutapseudocolor
        # Ruta al archivo de la capa raster rutarasterfill y la capa es self.qleraster.text()
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutapseudocolor = (os.path.join(rutaestilos, "ACB_DEM_VINTAGE.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutapseudocolor)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca

    def formatoedificios(self, event):
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutaedif = (os.path.join(rutaestilos, "ACB_DEM_EDIFICIOS.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutaedif)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca

    def formatovegetacion(self, event):
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutaedif = (os.path.join(rutaestilos, "ACB_DEM_VEGETACION.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutaedif)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca

    def formatohistograma(self, event):
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutaedif = (os.path.join(rutaestilos, "ACB_DEM_HISTOGRAMA.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutaedif)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca
        # Abrir el cuadro de diálogo de propiedades de la capa
        prop_dialog = iface.showLayerProperties(caparaster)
        self.ventanamensaje("Segoe Print", 12, "Propiedades de Capa", "Acepta para cerrar el Cuadro de Propiedades")


    def formatoppkk(self, event):
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutaedif = (os.path.join(rutaestilos, "ACB-PPKKetiquetas.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutaedif)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca

    def formatodempseudo2(self,event):
        # el estilo está en rutapseudocolor
        # Ruta al archivo de la capa raster rutarasterfill y la capa es self.qleraster.text()
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutapseudocolor = (os.path.join(rutaestilos, "ACB_DEM_PSEUDO2.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutapseudocolor)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca
        # Abrir el cuadro de diálogo de propiedades de la capa
        prop_dialog = iface.showLayerProperties(caparaster)
        self.ventanamensaje("Segoe Print", 12, "Propiedades de Capa", "Acepta para cerrar el Cuadro de Propiedades")


    def formatodempseudo3(self,event):
        # el estilo está en rutapseudocolor
        # Ruta al archivo de la capa raster rutarasterfill y la capa es self.qleraster.text()
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutapseudocolor = (os.path.join(rutaestilos, "ACB_DEM_PSEUDO3.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutapseudocolor)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca
        # Abrir el cuadro de diálogo de propiedades de la capa
        prop_dialog = iface.showLayerProperties(caparaster)
        self.ventanamensaje("Papyrus", 12, "Propiedades de Capa", "Acepta para cerrar el Cuadro de Propiedades")

    def formatoverdes(self,event):
        # el estilo está en rutapseudocolor
        # Ruta al archivo de la capa raster rutarasterfill y la capa es self.qleraster.text()
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutapseudocolor = (os.path.join(rutaestilos, "ACB_DEM_VERDES.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutapseudocolor)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca

    def formatodemhill(self,event):
        # el estilo está en rutapseudocolor
        # Ruta al archivo de la capa raster rutarasterfill y la capa es self.qleraster.text()
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutapseudocolor = (os.path.join(rutaestilos, "ACB_DEM_HILLSHADE.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutapseudocolor)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca

    def formatodemgrismono(self,event):
        # el estilo está en rutapseudocolor
        # Ruta al archivo de la capa raster rutarasterfill y la capa es self.qleraster.text()
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        rutapseudocolor = (os.path.join(rutaestilos, "ACB_DEM_GRISMONO.qml"))
        caparaster = iface.activeLayer()
        caparaster.loadNamedStyle(rutapseudocolor)  # Cargar el estilo QML
        caparaster.triggerRepaint()  # refresca

    def configura(self, event):
        # V A R I A B L E S
        self.project = QgsProject.instance()
        proj_variables = QgsExpressionContextUtils.projectScope(self.project)  # llamada a todas las variables del proyecto

        # VARIABLE TITULO
        titulo = self.letitulo.text()
        titulomemoria = str(proj_variables.variable('acbtitulo'))  # llamada a la variable 'acbtitulo' en formato cadena

        if titulo != titulomemoria:  # ocurre solo si el titulo es distinto a la variable en memoria
            self.project.setTitle(titulo)  # carga el titulo de proyecto desde editlabel letitulo
            # cambia el valor de la variable de proyecto
            QgsExpressionContextUtils.setProjectVariable(self.project, 'acbtitulo',titulo)  # carga la expresion del label en la variable

        # VARIABLES ENTIDAD1 Y ENTIDAD2
        entidad1 = self.lentidad1.text()
        entidad2 = self.lentidad2.text()
        entidad1memoria = str(proj_variables.variable('acbentidad1'))  # llamada a la variable en formato cadena
        entidad2memoria = str(proj_variables.variable('acbentidad2'))

        if entidad1 != entidad1memoria:  # ocurre solo si la variable en módulo es distinta a la variable en memoria
            # cambia el valor de la variable de proyecto
            QgsExpressionContextUtils.setProjectVariable(self.project, 'acbentidad1',entidad1)  # carga la expresion del label en la variable

        if entidad2 != entidad2memoria:  # ocurre solo si la variable en módulo es distinta a la variable en memoria
            # cambia el valor de la variable de proyecto
            QgsExpressionContextUtils.setProjectVariable(self.project, 'acbentidad2',entidad2)  # carga la expresion del label en la variable

        # VARIABLE AUTOR PROYECTO
        autor = self.le_autor.text()
        autormemoria = str(proj_variables.variable('acbautor'))
        if autor != autormemoria:
            QgsExpressionContextUtils.setProjectVariable(self.project, 'acbautor', autor)

        # VARIABLE FECHA DE INFORME
        fechareport = self.txtfecha.text()
        fechamemoria = str(proj_variables.variable('acbfechainforme'))
        if fechareport != fechamemoria:
            QgsExpressionContextUtils.setProjectVariable(self.project, 'acbfechainforme', fechareport)

        # VARIABLE LOGO DEL INFORME
        rutanueva = self.qfw_logo.filePath()
        rutamemoria = str(proj_variables.variable('acblogoinforme'))
        if rutanueva != rutamemoria:
            QgsExpressionContextUtils.setProjectVariable(self.project, 'acblogoinforme', rutanueva)

        # VARIABLE IMAGEN 3D
        rutanueva2 = self.qfw_logo2.filePath()
        rutamemoria2 = str(proj_variables.variable('acbimagen3d'))
        if rutanueva2 != rutamemoria2:
            QgsExpressionContextUtils.setProjectVariable(self.project, 'acbimagen3d', rutanueva2)

        # VARIABLE HISTOGRAMA
        rutanueva3 = self.qfwhistograma.filePath()
        rutamemoria3 = str(proj_variables.variable('acbhistograma'))
        if rutanueva3 != rutamemoria3:
            QgsExpressionContextUtils.setProjectVariable(self.project, 'acbhistograma', rutanueva3)

        mensaje = QMessageBox()
        font = QFont("Arial", 12)  # Aquí puedes cambiar la fuente y el tamaño
        font.setBold(True)
        mensaje.setFont(font)
        mensaje.setIcon(QMessageBox.Information)
        mensaje.setWindowTitle("Configuración Actualizada")
        mensaje.setText("Es necesario guardar Proyecto \n Cuando Actualices la ruta de CloudCompare\nReiniciar Qgis")
        mensaje.setStandardButtons(QMessageBox.Ok)
        resultado = mensaje.exec_()

    def imprimepdf(self, event):
        self.directorios_informe(event)  # llama a la funcion directorios_informe
        self.escala(event) #Determina la escala actual de extension de capa y solicta otra al redondeo

        # elige el tipo de salida como mapa único o como atlas
        if informe == 'PORTADA-A4VER':  # mapa simple en una página
            self.mapaunicopdf(event)
        if informe == 'MAPA_GENERAL':  # mapa simple en una página
            self.mapaunicopdf(event)
        self.mensaje.setText("")
        if informe == 'MAPA_GENERAL_A3':  # mapa simple en una página
            self.mapaunicopdf(event)
        if informe == 'MAPA_VINTAGE':  # mapa simple en una página
            self.mapaunicopdf(event)
        if informe == 'MAPA_3D':  # mapa simple en una página
            self.mapaunicopdf(event)
        if informe == 'HISTOGRAMA':  # mapa simple en una página
            self.mapaunicopdf(event)
        if informe == 'PERFILES':  # mapa simple en una página
            self.atlaspdf(event)

        self.mensaje.setText("")

        if self.lesalida.text() == 'salida':  # identifica en el label edit lesalida que la salida es igual a 'salida' para abrir el pdf
            textoescala = f"Escala: 1:{escalamapa:.0f} m \n {rutainforme}"
            self.ventanamensaje("Segoe Print", 12, "Exportación a Pdf Terminada",textoescala)
            os.startfile(rutainforme)
            return True

    def selecciona_informe(self,event):
        #carga la lista de informes en cmbinformes
        global listainformes,informe #variable global
        listainformes=[]
        listainformes=['PORTADA-A4VER','MAPA_GENERAL','MAPA_GENERAL_A3', 'MAPA_VINTAGE', 'HISTOGRAMA', 'MAPA_3D', 'PERFILES']
        self.cmbinformes.clear() #borra el contenido del cuadro combinado
        self.cmbinformes.addItems(listainformes)
        informe=self.cmbinformes.currentText()

    def directorios_informe(self, event):
        global rutainforme, rutapng
        self.configura(event)  # llamada a la funcion configura desde otra función
        capa_seleccionada = iface.activeLayer()
        rutacapa=iface.activeLayer()
        #rutacapa = capa_seleccionada.source()
        carpeta = QgsProject.instance().homePath() + '/ACB-INFORMES/'
        #si el directorio no existe lo crea
        try:
            os.stat(carpeta)
        except:
            os.mkdir(carpeta)

        nombrebase=informe
        rutainforme = carpeta + nombrebase + '.pdf'  # ruta de destino del pdf
        rutapng = carpeta + nombrebase + '.png'  # ruta de destino del png

    def elegirinforme(self, event):
        #pondrá en el label el elemento seleccionado en el combo
        global informe
        informe=self.cmbinformes.currentText()# el informe seleccionado será el que se imprima

    def imprimepng(self, event):
        self.directorios_informe(event)  # llama a la funcion directorios_informe
        self.escala(event) #Determina la escala actual de extension de capa y solicta otra al redondeo

        # elige el tipo de salida como mapa único
        if informe == 'PORTADA-A4VER':  # mapa simple en una página
            self.mapaunicopng(event)
        if informe == 'MAPA_GENERAL':  # mapa simple en una página
            self.mapaunicopng(event)
        if informe == 'MAPA_GENERAL_A3':  # mapa simple en una página
            self.mapaunicopng(event)
        if informe == 'MAPA_VINTAGE':  # mapa simple en una página
            self.mapaunicopng(event)
        if informe == 'MAPA_3D':  # mapa simple en una página
            self.mapaunicopng(event)
        if informe == 'HISTOGRAMA':  # mapa simple en una página
            self.mapaunicopng(event)
        if informe=='PERFILES' :#mapa de atlas
            self.atlaspng(event)

        self.mensaje.setText("")
        self.ventanamensaje("Segoe Print", 12, "Exportación a Imagenes múltiles Png Terminada",
                            rutapng)
        os.startfile(rutapng)
        return True

    def mapaunicopdf(self, event):  # processing run para mapa unico

        processing.run("native:printlayouttopdf",
                       {'LAYOUT': informe,  # Nombre de la composición elegida en el combo cmbinformes
                        'LAYERS': None,  # capa a representar
                        'DPI': None,
                        'FORCE_VECTOR': True,
                        'FORCE_RASTER': False,
                        'GEOREFERENCE': True,
                        'INCLUDE_METADATA': True,
                        'DISABLE_TILED': False,
                        'SIMPLIFY': True,
                        'TEXT_FORMAT': 1,
                        'IMAGE_COMPRESSION': 0,
                        'SEPARATE_LAYERS': False,
                        'OUTPUT': rutainforme})  # salida del informe ruta y nombre


    def mapaunicopng(self,event):
        processing.run("native:printlayouttoimage",
            {'LAYOUT':informe,
            'LAYERS':None,
            'DPI':None,
            'GEOREFERENCE':True,
            'INCLUDE_METADATA':True,
            'ANTIALIAS':True,
            'OUTPUT':rutapng})

    def funestad(self, event):
        dlg=FormularioEstadistica() #clase del formulario
        dlg.exec_()
        QgsProject.instance().write() #guarda el proyecto

    def curvasnivel(self,event):
        global rutacurvamaestra,capamaestra, nombre_capa, equidistancia
        self.ventanamensaje("Segoe Print", 12, "Curvas de Nivel",
                            "Este proceso es rápido si el ráster se creó con CloudCompare\n Pero muy lento si el ráster procede de Pdal")

        if self.checkBox1.isChecked():
            equidistancia=20
        if self.checkBox2.isChecked():
            equidistancia=10
        if self.checkBox3.isChecked():
            equidistancia=2
        if self.checkBox4.isChecked():
            equidistancia=1

        caparaster = iface.activeLayer()
        nombre_capa = caparaster.name()
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacurvas = (os.path.join(rutactual, 'ACB-CAPAS/ACB_CURVASNIVEL/'))
        rutacurvamaestra=rutacurvas + "CURVAS_NIVEL_" + str(equidistancia) + "m.gpkg"
        processing.run("gdal:contour", {
            'INPUT': caparaster,
            'BAND': 1, 'INTERVAL': equidistancia, 'FIELD_NAME': 'ELEV', 'CREATE_3D': True, 'IGNORE_NODATA': True, 'NODATA': None,
            'OFFSET': 0, 'EXTRA': '',
            'OUTPUT': rutacurvamaestra})

        self.cargacurvas(event) #carga la curva maestra
        self.formatocurvamaestra(event) #aplica formato maestra

        # exporta a varios formatos a la vez

        if self.rbkml.isChecked():#formato KML
            rutacnkml = rutacurvas + nombre_capa + "_CURVAS_NIVEL_KML_" + str(equidistancia) + "m.kml"
            processing.run("gdal:contour", {
                'INPUT': caparaster,
                'BAND': 1, 'INTERVAL': equidistancia, 'FIELD_NAME': 'ELEV', 'CREATE_3D': True, 'IGNORE_NODATA': True,
                'NODATA': None,
                'OFFSET': 0, 'EXTRA': '',
                'OUTPUT': rutacnkml})

        if self.rbjson.isChecked():#formato Json
            rutacnjson = rutacurvas + nombre_capa + "_CURVAS_NIVEL_JSON_" + str(equidistancia) + "m.json"
            processing.run("gdal:contour", {
                'INPUT': caparaster,
                'BAND': 1, 'INTERVAL': equidistancia, 'FIELD_NAME': 'ELEV', 'CREATE_3D': True, 'IGNORE_NODATA': True,
                'NODATA': None,
                'OFFSET': 0, 'EXTRA': '',
                'OUTPUT': rutacnjson})

        if self.rbgjson.isChecked():#formato Geojson
            rutacngjson = rutacurvas + nombre_capa + "_CURVAS_NIVEL_GeoJson_" + str(equidistancia) + "m.gpkg"
            processing.run("gdal:contour", {
                'INPUT': caparaster,
                'BAND': 1, 'INTERVAL': equidistancia, 'FIELD_NAME': 'ELEV', 'CREATE_3D': True, 'IGNORE_NODATA': False,
                'NODATA': None,
                'OFFSET': 0, 'EXTRA': '',
                'OUTPUT': rutacngjson})

        if self.rbshp.isChecked():#formato SHAPE
            rutacnshp = rutacurvas + nombre_capa + "_CURVAS_NIVEL_SHAPE_" + str(equidistancia) + "m.shp"
            processing.run("gdal:contour", {
                'INPUT': caparaster,
                'BAND': 1, 'INTERVAL': equidistancia, 'FIELD_NAME': 'ELEV', 'CREATE_3D': True, 'IGNORE_NODATA': True,
                'NODATA': None,
                'OFFSET': 0, 'EXTRA': '',
                'OUTPUT': rutacnshp})

        if self.rbdxf.isChecked():
            rutacndxf = rutacurvas + nombre_capa + "_CURVAS_NIVEL_DXF_" + str(equidistancia) + "m.dxf"
            #Exporta a DXF de EPSG: ACTUAL A EPSG:seleccionado CRS
            extendestino=' EPSG'+str(crs)+'.dxf'
            processing.run("native:dxfexport",
                {'LAYERS':[{'layer': rutacurvamaestra,
                'attributeIndex': -1}],
                'SYMBOLOGY_MODE':0,
                'SYMBOLOGY_SCALE':1e+06,
                'ENCODING':'ISO-8859-1',
                'CRS':QgsCoordinateReferenceSystem(crs),
                'USE_LAYER_TITLE':True,
                'FORCE_2D':False,
                'MTEXT':True,
                'OUTPUT':rutacndxf})
        #Mensage final proceso
        iface.messageBar().pushMessage("Exportación de Curvas de Nivel Finalizado ", level=0, duration=5)
        self.ventanamensaje("Segoe Print", 12, "Curvas de Nivel",
                            "Exportación Finalizada")

    def cargacurvas(self,event):
        # Agrega las curvas de nivel al canvas

        capamaestra = QgsVectorLayer(rutacurvamaestra)
        QgsProject.instance().addMapLayer(capamaestra)
        capamaestra.setName(nombre_capa + "_CurvasNV_"+str(equidistancia))
        iface.mapCanvas().refresh()

    def formatocurvamaestra(self,event):
        rutaestilos = (os.path.join(self.plugin_dir, 'icons'))
        if self.checkBox1.isChecked():
            rutamaestra = (os.path.join(rutaestilos, "ACB_MAESTRAS1.qml"))
        if self.checkBox2.isChecked():
            rutamaestra = (os.path.join(rutaestilos, "ACB_MAESTRAS2.qml"))
        if self.checkBox3.isChecked():
            rutamaestra = (os.path.join(rutaestilos, "ACB_MAESTRAS3.qml"))
        if self.checkBox4.isChecked():
            rutamaestra = (os.path.join(rutaestilos, "ACB_MAESTRAS4.qml"))

        capamaestra = iface.activeLayer()
        capamaestra.loadNamedStyle(rutamaestra)  # Cargar el estilo QML
        capamaestra.triggerRepaint()  # refresca

    def abreinformes(self,event):
        ruta_abrir='ACB-INFORMES/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def abrenubes(self,event):
        ruta_abrir='ACB-CAPAS/ACB_NUBES/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def abrecurvas(self,event):
        ruta_abrir='ACB-CAPAS/ACB_CURVASNIVEL/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def abredsmpdal(self,event):
        ruta_abrir='ACB-CAPAS/ACB_DSM_PDAL/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def abredempdal(self,event):
        ruta_abrir='ACB-CAPAS/ACB_DEM_PDAL/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def abredsmcc(self,event):
        ruta_abrir='ACB-CAPAS/ACB_DSM_CCOMP/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def abredemcc(self,event):
        ruta_abrir='ACB-CAPAS/ACB_DEM_CCOMP/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def abremallas(self,event):
        ruta_abrir='ACB-CAPAS/ACB_MALLAS/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def abreraster(self,event):
        ruta_abrir='ACB-CAPAS/ACB_RASTER/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def export3d(self,event):
        # Llama al formulario modelo3d.ui que contiene la clase modelo3dclass
        dlg=modelo3dclass() #clase del formulario
        dlg.exec_()

    def visor(self,event):
        # abre url con esta direccion y abre la carpeta para lanzar el modelo a la web
        # https://gltf-viewer.donmccurdy.com/
        self.abrevisor(event)
        self.abrefolder(event)
    def abrevisor(self,event):
        #self.abrefolder3d(event) #abre la carpeta de destino de archivos en windows
        urldireccion = 'https://3dviewer.net/'  # direccion url del visor 3d gltf
        webbrowser.open(urldireccion,new=0,autoraise=True,) #intentará abrir la aplicación web

    def abrefolder(self,event):
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutamodelo3d = (os.path.join(rutactual, 'ACB-MODELO3D/'))
        rutamalla = (os.path.join(rutactual, 'ACB-CAPAS/ACB_MALLAS/'))
        os.startfile(rutamodelo3d)  # abre la carpeta
        os.startfile(rutamalla)  # abre la carpeta

    def sketch3d(self,event):
        # Llama al formulario sketch.ui que contiene la clase sketchfab
        dlg=sketchfab() #clase del formulario
        dlg.exec_()

    def model3dprevio(self,event):
        rutapdfprevio=(os.path.join(os.path.dirname(__file__), 'icons', "MODELO3D.pdf")) # ruta del pdf explicativo Qgis2Threejs
        os.popen(rutapdfprevio)
        return True

    def modelogltf(self,event):
        global rutactual,rutamodelo3d
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutamodelo3d = (os.path.join(rutactual, 'ACB-MODELO3D/'))
        rutamascara=(os.path.join(rutactual, 'ACB-CAPAS/MASCARA.gpkg|layername=MASCARA'))

        processing.run("Qgis2threejs:exportmodel",
            {'OUTPUT':rutamodelo3d,
            'INPUT':rutamascara,
            'TITLE':'fid',
            'CF_FILTER':False,
            'SCALE':0,
            'BUFFER':10,
            'TEX_WIDTH':4096,
            'TEX_HEIGHT':0,
            'SETTINGS':''})
        #abre url con esta direccion y abre la carpeta para lanzar el modelo a la web
        #https://gltf-viewer.donmccurdy.com/
        self.ventanamensaje("Segoe Print", 12, "Modelo 3D",
                            "Archivo gltf generado")
        self.abrefolder3d(event)

    def abrefolder3d(self,event):
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutamodelo3d = (os.path.join(rutactual, 'ACB-MODELO3D/'))
        os.startfile(rutamodelo3d)  # abre la carpeta

    def ayuda2(self, event):
        rutaPDF=(os.path.join(os.path.dirname(__file__), 'icons', "MOD3D.pdf")) # ruta del manual en el plugin
        os.popen(rutaPDF)
        return True

    def abremalla(self,event):
        dlg=FormularioMalla() #clase del formulario
        dlg.exec_()

    def exportaraster(self,event):
        self.ventanamensaje("Segoe Print", 12, "Previo",
                            "Necesario seleccionar previamente\nRáster y CRS")
        caparaster = iface.activeLayer()
        nombre_capa = self.qlnombre.text()
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutaexport = (os.path.join(rutactual, 'ACB-CAPAS/ACB_RASTER/'))
        rutarasexport = rutaexport + nombre_capa + ".tif"
        crs = QgsProject.instance().crs()
        caparaster.setCrs(crs)  # asigna el src a la capa
        iface.mapCanvas().refresh()  # Refresca canvas

        #la listaexporta se refiere a la extension llamada rabotonext
        listaexporta=[]
        if self.rabo1.isChecked():
            listaexporta.append(".asc")#rabo 1
        if self.rabo2.isChecked():
            listaexporta.append(".tif")#rabo 2
        if self.rabo3.isChecked():
            listaexporta.append(".tiff")#rabo 3
        if self.rabo4.isChecked():
            listaexporta.append(".bag")#rabo 4
        if self.rabo5.isChecked():
            listaexporta.append(".dat") #rabo 5
        if self.rabo6.isChecked():
            listaexporta.append(".dem") #rabo 6
        if self.rabo7.isChecked():
            listaexporta.append(".err") #rabo 7
        if self.rabo8.isChecked():
            listaexporta.append(".ers") #rabo 8
        if self.rabo9.isChecked():
            listaexporta.append(".grib2") #rabo 9
        if self.rabo10.isChecked():
            listaexporta.append(".grb") #rabo 10
        if self.rabo11.isChecked():
            listaexporta.append(".grb2") #rabo 11
        if self.rabo12.isChecked():
            listaexporta.append(".grd") #rabo 12
        if self.rabo13.isChecked():
            listaexporta.append(".hf2")#rabo 13
        if self.rabo14.isChecked():
            listaexporta.append(".img")#rabo 14
        if self.rabo15.isChecked():
            listaexporta.append(".jpeg")#rabo 15
        if self.rabo16.isChecked():
            listaexporta.append(".jpg")#rabo 16
        if self.rabo19.isChecked():
            listaexporta.append(".map")#rabo 19
        if self.rabo20.isChecked():
            listaexporta.append(".mbtiles")#rabo 20
        if self.rabo21.isChecked():
            listaexporta.append(".vrt")#rabo 21
        if self.rabo22.isChecked():
            listaexporta.append(".xyz")#rabo 22
        if self.rabo23.isChecked():
            listaexporta.append(".xpm")#rabo 23
        if self.rabo17.isChecked():
            listaexporta.append(".kml")#rabo 17
        if self.rabo18.isChecked():
            listaexporta.append(".kmz")#rabo 18

        self.lbexten.setText('')
        for exten in listaexporta:
            if exten==".kml":
                rutaexport = (os.path.join(rutactual, 'ACB-CAPAS/ACB_RASTER/ACB_KML/'))
            if exten==".kmz":
                rutaexport = (os.path.join(rutactual, 'ACB-CAPAS/ACB_RASTER/ACB_KMZ/'))

            #rutarasexport = (os.path.join(rutaexport,nombre_capa+exten))
            rutarasexport = rutaexport+ nombre_capa + exten
            self.lbexten.setText(rutarasexport) #actualiza lbproceso con la lista
            self.repaint()
            try:
                processing.run("gdal:translate", {
                    'INPUT': caparaster,
                    'TARGET_CRS': crs,
                    'NODATA': None,
                    'COPY_SUBDATASETS': False,
                    'OPTIONS': '',
                    'EXTRA': '',
                    'DATA_TYPE': 0,
                    'OUTPUT': rutarasexport})
            except:
                pass
        # Mensage final proceso
        iface.messageBar().pushMessage("Exportación Ráster Finalizado ", level=0, duration=5)
        self.ventanamensaje("Segoe Print", 12, "Exportación Ráster",
                            "Exportación Finalizada")
        self.abrefolder6(event) #abre la carpeta

    def abrefolder6(self,event):
        ruta_abrir='ACB-CAPAS/ACB_RASTER/'
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutacompleta = (os.path.join(rutactual, ruta_abrir))
        os.startfile(rutacompleta)  # abre la carpeta

    def clipraster(self,event):

        crscapa=QgsProject.instance().crs()  # asigna al proyecto el crs seleccionado
        #Lanza un mensjae de confirmación
        mensaje = QMessageBox()
        mensaje.setIcon(QMessageBox.Question)
        mensaje.setText(f"Asegúrate de que estás sobre el ráster que quieres recortar\nEl Sistema de Referencia aplicado es {crscapa.postgisSrid()}\n{crscapa.description()}")
        mensaje.setWindowTitle("Proceso Recorte del Ráster contra la Máscara")
        mensaje.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        mensaje.button(QMessageBox.Ok).setText("Aceptar")
        mensaje.button(QMessageBox.Cancel).setText("Cancelar")
        font = QFont("Arial", 12)  # Aquí puedes cambiar la fuente y el tamaño
        font.setBold(True)
        mensaje.setFont(font)
        resultado = mensaje.exec_()
        #fin mensaje de confirmación
        if resultado==QMessageBox.Ok:
            rutactual2 = QgsProject.instance().homePath()  # ruta actual
            rutamascara2 = (os.path.join(rutactual2, 'ACB-CAPAS', "MASCARA.gpkg"))
            caparaster = iface.activeLayer()
            ruta = caparaster.source()
            directorio = os.path.dirname(QgsProject.instance().readPath(ruta))
            nombre="CLIP_"+str(caparaster.name())
            rutarasterclip = directorio+"/"+nombre+".tif"
            processing.run("gdal:cliprasterbymasklayer",
                           {'INPUT':ruta,'MASK':rutamascara2,
                            'SOURCE_CRS':crscapa,'TARGET_CRS':None,'TARGET_EXTENT':None,'NODATA':None,
                            'ALPHA_BAND':False,'CROP_TO_CUTLINE':True,'KEEP_RESOLUTION':True,'SET_RESOLUTION':False,
                            'X_RESOLUTION':None,'Y_RESOLUTION':None,'MULTITHREADING':False,'OPTIONS':'','DATA_TYPE':0,
                            'EXTRA':'',
                            'OUTPUT':rutarasterclip})
            QMessageBox.information(None,"Se ha Recortado el Ráster Seleccionado en la misma ruta:",rutarasterclip)
        else:
            pass

        #Carga la capa raster recortada al canvas Qgis
        layer = QgsRasterLayer(rutarasterclip, nombre)
        QgsProject.instance().addMapLayer(layer)
        iface.mapCanvas().refresh()



    def localizacc(self,event):
        rutafilecc=self.filecc.filePath() #ruta seleccionada en QgsFileWidget incluso archivo y extensión
        rutafoldercc=os.path.dirname(rutafilecc) #ruta de la carpeta que contiene el archivo (solo carpetas)
        QgsProject.instance().write()  # guarda el proyecto
        self.lerutacc.setText(str(rutafoldercc)) #presenta la ruta en el label lerutacc (solo carpetas sin el archivo)
        ejecutable=rutafilecc
        # V A R I A B L E S
        self.project = QgsProject.instance()
        proj_variables = QgsExpressionContextUtils.projectScope(
            self.project)  # llamada a todas las variables del proyecto
        # cambia el valor de la variable de proyecto
        QgsExpressionContextUtils.setProjectVariable(self.project, 'acbrutacc', rutafoldercc) #variable de la ruta del ejecutable CloudCompare.exe
        QgsExpressionContextUtils.setProjectVariable(self.project, 'acbejecutable', ejecutable) #variable del ejecutable CloudCompare.exe a veces se instala como cloudcompare.exe y no es lo mismo
        QgsProject.instance().write()  # guarda el proyecto

        mensaje = QMessageBox()
        font = QFont("Arial", 12)  # Aquí puedes cambiar la fuente y el tamaño
        font.setBold(True)
        mensaje.setFont(font)
        mensaje.setIcon(QMessageBox.Information)
        mensaje.setWindowTitle("Configuración Actualizada")
        mensaje.setText("Es necesario guardar Proyecto y \n Reiniciar Qgis")
        mensaje.setStandardButtons(QMessageBox.Ok)
        resultado = mensaje.exec_()

    def previacoordz(self,event):
        # Parte CloudCompare para Coord Z
        self.project = QgsProject.instance() #llamada a todas las variables del proyecto
        proj_variables = QgsExpressionContextUtils.projectScope(self.project)  # llamada a todas las variables del proyecto
        rutacloudcompare = str(proj_variables.variable('acbrutacc'))#llamada a la variable 'acbrutacc' en formato cadena
        self.lerutacc.setText(rutacloudcompare)
        ejecutable = str(proj_variables.variable('acbejecutable'))  # llamada a la variable 'acbejecutable' en formato cadena
        self.filecc.setFilePath(ejecutable) #asigna al QgsFileWidget la ruta de la variable ejecutable
        filtro = "Archivos ejecutables (*.exe);;Todos los archivos (*)"
        self.filecc.setFilter(filtro) #aplica el filtro para la ruta de cloudcompare solo exe
        self.coordZ(event)

    def coordZ(self,event):
        self.selecciona(event)  # llama a la funcion selecciona para seleccionar la nube de puntos
        # Establecer la variable de entorno PATH
        os.environ["PATH"] = self.lerutacc.text() + ";" + os.environ["PATH"]  # Posicionado en la ruta de CloudCompare
        rutafilecc = self.filecc.filePath()  # ruta seleccionada en QgsFileWidget incluso archivo y extensión
        ejecutable = os.path.basename(rutafilecc)  # solo nombre del ejecutable CloudCompare.exe

        for ruta in listanubes:
            comandocc = ([
                ejecutable,  # Ejecuta cloudcompare aunque no lo abre
                "-SILENT",
                "-CLEAR",
                "-AUTO_SAVE OFF",  # Neutraliza que adopte el nombre del resultado automatico
                "-O", "-GLOBAL_SHIFT AUTO", f'"{ruta}"',
                "-C_EXPORT_FMT LAS -EXT LAZ",  # cambia el formato para exportar a laz
                "-COORD_TO_SF Z", #Exporta cota Z a un campo escalar (SF) Coord. Z
                "-SAVE_CLOUDS FILE ", f'"{ruta}"',
                "-CLEAR"
            ])
            subprocess.run(" ".join(comandocc), shell=True)

    def selecciona(self,event):
        # CREA LA LISTA CON LA RUTA RELATIVA ./NUBEPUNTOS/NOMBRE DE LA NUBE.laz o las
        global listanubes, rutanubes
        rutactual = QgsProject.instance().homePath()  # ruta actual
        rutanubes = (os.path.join(rutactual, "ACB-CAPAS/ACB_NUBES"))   # Ruta de la carpeta con todas las nubes de puntos
        listanubes=[]    # Lista para almacenar los nombres de archivos de puntos
        carpeta_archivos = os.listdir(rutanubes)   # directorio con todos los archivos en rutanubes
        # Itera sobre la lista de archivos y filtra los que terminan en ".las" o ".laz"

        for archivo in carpeta_archivos: #para cada archivo contenido en la carpeta
            if "NUBE.laz" in archivo:
                pass
            elif archivo.endswith(".las") or archivo.endswith(".laz") or archivo.endswith(".LAZ") or archivo.endswith(".LAS") or archivo.endswith(".bin"):
                listanubes.append(os.path.join(rutactual, 'ACB-CAPAS/ACB_NUBES/' + archivo))
            else :
                pass

    def escala(self,event):
        global escalamapa, escala

        # exporta a un único archivo pdf. No vale para reportes tipo informe solo atlas

        ##################   INICIO ZOOM EXTENSION MAPA3   ################
        capa_seleccionada = iface.activeLayer()
        extent = capa_seleccionada.extent()

        # El siguiente código hace zoom solo a la extensión y un poco más en el informe
        # Obtiene los puntos extremos de la extensión y quita 500 metros a cada lado lat y long
        xmin = extent.xMinimum() + 0.005
        ymin = extent.yMinimum() + 0.005
        xmax = extent.xMaximum() - 0.005
        ymax = extent.yMaximum() - 0.005

        esquina_inf_izq = QgsPointXY(xmin, ymin)
        esquina_sup_der = QgsPointXY(xmax, ymax)
        map_posicion1 = QgsPointXY(esquina_inf_izq)  # referencia a la posicion del punto xy1
        map_posicion2 = QgsPointXY(esquina_sup_der)  # referencia a la posicion del punto xy2
        rectan = QgsRectangle(map_posicion1, map_posicion2)
        centrado = qgis.utils.iface.mapCanvas()  # llamada al canvas de Qgis (el mapa)
        centrado.setExtent(rectan)  # la vista de mapa será la extensión del rectánculo
        centrado.refresh()  # actualiza la vista de mapa
        layout = QgsProject.instance().layoutManager().layoutByName(
            informe)  # define composición de interés informe según comboinformes
        map_item = layout.itemById("Mapa3")  # Nombre del elemento de mapa en la composicion layout
        # Ajusta la extensión del mapa a la extensión de la capa activa
        if isinstance(map_item, QgsLayoutItemMap):
            map_item.zoomToExtent(centrado.extent())
            centrado.refresh()

        escala = map_item.scale()
        textoescala = f"Escala: 1:{escala:.0f} (metros)"
        escalamapa, ok = QInputDialog.getInt(self, textoescala, "Ingresa Escala Redondeada:")

        # Ajusta la extensión del mapa a la escala dada
        if isinstance(map_item, QgsLayoutItemMap):
            map_item.setScale(escalamapa)
            centrado.refresh()

        ##################   fin ZOOM EXTENSION MAPA3   ################

    def atlaspdf(self, event):  # processing run para atlas
        rutacapa = iface.activeLayer()
        processing.run("native:atlaslayouttopdf",
                       {'LAYOUT': informe,  # Nombre de la composición elegida en el combo cmbinformes
                        'COVERAGE_LAYER': rutacapa,  # capa a representar
                        'FILTER_EXPRESSION': None,  # filtro a aplicar dentro de esa capa
                        'SORTBY_EXPRESSION': '"fid"',  # campo elegido para el orden del informe
                        'SORTBY_REVERSE': False,  # orden inverso
                        'LAYERS': None,
                        'DPI': None,  # capas de mapa base
                        'FORCE_VECTOR': False,  # representación vectorial
                        'FORCE_RASTER': False,
                        'GEOREFERENCE': True,  # información de georreferenciación incorporada
                        'INCLUDE_METADATA': True,  # incluye metadatos al pdf
                        'DISABLE_TILED': False,
                        'SIMPLIFY': True,  # simplifica geometrías
                        'TEXT_FORMAT': 0,  # formato de texto puro
                        'IMAGE_COMPRESSION': 0,  # compresión de imágenes con jpg
                        'OUTPUT': rutainforme})  # salida del informe ruta y nombre

    def atlaspng(self,event):
        rutacapa = iface.activeLayer()
        processing.run("native:atlaslayouttoimage",
            {'LAYOUT':informe,
            'COVERAGE_LAYER':rutacapa,
            'FILTER_EXPRESSION':None,#filtro
            'SORTBY_EXPRESSION':'',
            'SORTBY_REVERSE':False,
            'FILENAME_EXPRESSION':"'Perfil_'||@atlas_pagename",
            'FOLDER':rutapng,
            'LAYERS':None,
            'EXTENSION':8,
            'DPI':None,
            'GEOREFERENCE':True,
            'INCLUDE_METADATA':True,
            'ANTIALIAS':True})

    def ppkk(self,event):
        #Elimina los ppkk previos si es que existen o cada vez que computamos el botón
        rutappkk = QgsProject.instance().homePath() + '/ACB-CAPAS/PPKK.gpkg'
        rutaperfil = QgsProject.instance().homePath() + '/ACB-CAPAS/PERFIL.gpkg|layername=PERFIL'
        nombre_capa = 'PPKK'
        from qgis.analysis import QgsNativeAlgorithms
        # Agrega los algoritmos nativos de QGIS
        QgsApplication.processingRegistry().addProvider(QgsNativeAlgorithms())
        proyecto = QgsProject.instance()
        capa_a_eliminar = proyecto.mapLayersByName(nombre_capa)# Busca la capa por su nombre
        try:
            proyecto.removeMapLayer(capa_a_eliminar[0].id())# Elimina la capa del proyecto
            os.remove(rutappkk) #elimina la capa en origen
        except:
            pass
        QgsProject.instance().write() #guarda el proyecto
        iface.mapCanvas().refreshAllLayers()
        try:
            processing.run("native:pointsalonglines", #crea puntos cada 100m en cada perfil
                           {'INPUT': rutaperfil,
                            'DISTANCE': 100,
                            'START_OFFSET': 0,
                            'END_OFFSET': 0,
                            'OUTPUT': rutappkk})

            #Carga la capa raster al grupo
            capappkk = QgsVectorLayer(rutappkk, 'PPKK')
            QgsProject.instance().addMapLayer(capappkk, False)  # no la carga de inmediato
            root = QgsProject.instance().layerTreeRoot()  # se prepara el árbol de capas
            grupomapa = root.findGroup('PROYECTO')  # localiza el grupo en el árbol
            grupomapa.insertLayer(0, capappkk)  # inserta la capa raster al final del grupomapa
            QgsProject.instance().write()  # guarda el proyecto
            iface.mapCanvas().refreshAllLayers()
        except:
            pass

    def print3d(self,event):
        plugin_name = 'DEMto3D'# Nombre del plugin que queremos llamar
        dem_plugin = plugins.get(plugin_name)        # Obtener la instancia del plugin 'dem' desde el gestor de plugins
        if dem_plugin:
            dem_plugin.run()# Ejecutar el método run del plugin 'dem'
        else:# El plugin 'dem' no está cargado o no se pudo encontrar
            QMessageBox.Information(None,"Tendrás que abrirlo a mano o bien","El plugin '{plugin_name}' no está disponible.")

    def ayudaprint3d(self, event):
        rutaayuda=(os.path.join(os.path.dirname(__file__), 'icons', "PANTALLA_DEMTO3D.png")) # ruta del archivo
        os.popen(rutaayuda) #abre con la aplicaicón por defecto en windows

    def perfil(self,event):
        plugin_name = 'profiletool'# Nombre del plugin que queremos llamar
        dem_plugin = plugins.get(plugin_name)        # Obtener la instancia del plugin 'dem' desde el gestor de plugins
        if dem_plugin:
            dem_plugin.run()# Ejecutar el método run del plugin 'dem'
        else:# El plugin 'dem' no está cargado o no se pudo encontrar
            QMessageBox.Information(None,"Tendrás que abrirlo a mano o bien","El plugin '{plugin_name}' no está disponible.")

    def ventanamensaje(self,letra,tam,titulo,cuerpo):
        mensaje = QMessageBox()
        font = QFont(letra, tam)  # Aquí puedes cambiar la fuente y el tamaño
        font.setBold(True)
        mensaje.setFont(font) #asigna la fuente de letra
        mensaje.setIcon(QMessageBox.Information) #de tipo informativo
        mensaje.setWindowTitle(titulo)
        mensaje.setText(cuerpo)
        mensaje.setStandardButtons(QMessageBox.Ok)
        resultado = mensaje.exec_()

    def cargalidar(self,event):
        # Agrega la capa de puntos LAZ
        rutactual = QgsProject.instance().homePath() #ruta actual
        rutalidar = (os.path.join(rutactual, 'ACB-CAPAS/ACB_NUBES/', 'DEM_CC_TERRENO.laz'))
        rutalidar="E:/ACBQGIS/QGIS_PEDRAZA/ACB-CAPAS/ACB_NUBES/DEM_CC_TERRENO.laz"
        capapuntos = QgsVectorLayer(rutalidar, "Nube LIDAR", "pdal")
        # Asigna el crs
        crs = QgsProject.instance().crs()
        capapuntos.setCrs(crs)  #asigna el src a la capa

        QgsProject.instance().addMapLayer(capapuntos, False)
        root = QgsProject.instance().layerTreeRoot()    #se prepara el árbol de capas
        grupomapa=root.findGroup('NUBELIDAR')           #localiza el grupo en el árbol
        grupomapa.insertLayer(-1, capapuntos)               #inserta la capa raster al final del grupo
        iface.mapCanvas().refresh()                     # Refresca canvas

